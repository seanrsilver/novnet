expression("sum", 1, 2)
do.call("sum", 1, 2)
do.call("sum", list(1, 2))
build()
install()
document()
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
nnNetwork <- function(filename,
include.all = TRUE,
set.voice = NA,
local = FALSE,
layout.with = "fr",
community = "spinglass",
context = 15,
multiplex = FALSE,
token.threshold = 1,
metadata.off = NA,
sample = FALSE,
vertex.label.thresh = 1,
bg.col = "white"){
### 1) Scan in .txt and .csv files, return as data frame ----
novel.dat <- Txt_to_df(filename = filename,
include.all = TRUE,
set.voice = NA, # set to override Char.csv settings
local = FALSE)
### 2) Generate edgelist from char.data.df and text.uniq.v ----
###   a) Identify everywhere a character name appears within a certain range
###       of another character name, and record in an edgelist: from, to, position.
##        Position == word number of from character
## create a lookforward KWIC matrix
novel.net <- charDf_to_edgelist(data = novel.dat,
context = 15,
multiplex = FALSE,
token.threshold = 1, # Austen, 10
metadata.off = NA, # for Austen settings: c("character, "N")
sample = FALSE)
## Extract a network object (net.igr)
net.igr <- nnLayout(novel.net = novel.net,
layout.with = "fr",
remove.isolates = TRUE,
min.degree = 1)
## Create Colors
E(net.igr)$edge.color <- createColorPalette(edgelist = net.igr,
vertex.color.index = "weight",
color.palette = c("gray80", "gray20"),
alpha.range = c(.2, .8),
vertex.edge = "edge")
V(net.igr)$vertex.color <- createColorPalette(edgelist = net.igr,
edge.color.index = "tokenCount",
color.palette = c("yellow", "tomato"),
alpha.range = c(.5, 1),
vertex.edge = "vertex")
# Cut off names of low-degree characters
V(net.igr)$vertex.label <- V(net.igr)$name
V(net.igr)$vertex.label[which(V(net.igr)$tokenCount <= vertex.label.thresh)] <- NA
## Plot
# Set plot parameters
# background color and margins
par(bg = bg.col, mar = c(1, 1, 1, 1))
# plot title
if(plot.community != FALSE){title.start.v <- "The Communities of "} else {
title.start.v <- "Character Network of "}
main.title <- paste0(title.start.v, " ",
novel.dat$file.metadata.v["Title"],
" (",
novel.dat$file.metadata.v["Year"],
")")
# Plot without community:
if(plot.community == FALSE){
plot(net.igr,
edge.arrow.size = 0, edge.curved = 0,
edge.width = .5*E(net.igr)$weight^.4,
edge.color = E(net.igr)$edge.color,
layout = net.igr$layout,
vertex.size = degree(net.igr)^.4,
vertex.color = V(net.igr)$vertex.color,
vertex.label = V(net.igr)$vertex.label,
vertex.label.family = "Monaco", vertex.label.color = "black",
vertex.label.cex = .5,
label.degree = pi/2,
label.dist = 1,
main = main.title)
}
# Plot with community detection
# generate community object (net.com) from walktrap or spinglass algorithms
if(plot.community == "walktrap"){
# walktrap
net.com <- cluster_walktrap(net.igr)
}
if(plot.community == "spinglass"){
# spinglass (involves finding the largest connected component)
max.component.which.v <- which.max(clusters(net.igr)$csize)
max.component.v <- which(clusters(net.igr)$membership == max.component.which.v)
subgraph.igr <- induced.subgraph(net.igr, max.component.v)
net.com <- cluster_spinglass(subgraph.igr)
# map communities from subgraph to net.igr for color assignment
V(net.igr)$community.from.subgraph <-
membership(net.com)[V(net.igr)$name]
}
if(!is.na(plot.community)){
## assign color functions-- two options (one for gradient, the other for communities)
colors.fun <- colorRampPalette(brewer.pal(9, "Blues"))
default.colors <- categorical_pal(max(membership(net.com)))
plot(net.com,
net.igr,
mark.col = NA,
mark.border = "gray80",
col = default.colors[V(net.igr)$community.from.subgraph],
edge.arrow.size = 0, edge.curved = 0,
edge.width = E(net.igr)$weight^.4,
edge.color = E(net.igr)$edge.color,
layout = net.igr$layout,
vertex.size = 2.5*degree(net.igr)^.4,
vertex.label = V(net.igr)$vertex.label,
vertex.label.family = "Monaco",
vertex.label.color = "black",
vertex.label.cex = .8,
label.degree = pi/2,
label.dist = 1,
main = main.title)
}
}
nnNetwork("Oroonoko")
build()
build()
install()
document()
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
build()
document()
install()
detach.packages("ggplot")
detach("ggplot")
detach("ggplot2")
detach(ggplot2)
detach(igraph)
detach("igraph")
install.packages("ggplot2")
install.packages("ggplot2")
detach(ggplot2)
detach("ggplot2")
library(ggplot2)
detach(ggplot2)
detach("ggplot2")
?library
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
packages.v <- c("devtools", "roxygen2") # a list of packages to install() and library()
# a for () loop to install all packages in packages.v
for(package in packages.v){
if(!require(package, character.only = TRUE)){
install.packages(package)
library(package, character.only = TRUE)
}
}
check() # note: if "dependency not required" error, add name of package to description.
build()
document()
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
install()
library(NovNet)
getwd()
rm("nnNetwork")
build()
?build
build(path = "/NovNet/")
build(path = "/NovNet")
build(path = "./NovNet")
getwd()
build(path = paste0(getwd())
)
document()
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
install()
?install
install(pkg = "NovNet")
install(pkg = ".", reload = TRUE)
build(path = paste0(getwd()))
document()
updatePackageVersion <- function(packageLocation ="."){
## Read DESCRIPTION file
desc <- readLines(file.path(packageLocation, "DESCRIPTION"))
## Find the line where the version is defined
vLine <- grep("^Version\\:", desc)
## Extract version number
vNumber <- gsub("^Version\\:\\s*", "", desc[vLine])
## Split the version number into two; a piece to keep, a piece to increment
versionNumber <- strsplit(vNumber, "\\.")[[1]]
versionParts <- length(versionNumber)
vNumberKeep <- paste(versionNumber[1:(versionParts-1)], sep= "", collapse= ".")
vNumberUpdate <- versionNumber[versionParts]
## Replace old version number with new one (increment by 1)
oldVersion <- as.numeric(vNumberUpdate)
newVersion <- oldVersion + 1
## Build final version number
vFinal <- paste(vNumberKeep, newVersion, sep = ".")
## Update DESCRIPTION file (in R)
desc[vLine] <- paste0("Version: ", vFinal )
## Update the actual DESCRIPTION file
writeLines(desc, file.path(packageLocation, "DESCRIPTION"))
## Return the updated version number to screen
return(vFinal)
}
updatePackageVersion()
check() # note: if "dependency not required" error, add name of package to description.
install(pkg = ".", reload = TRUE)
filename = "Oroonoko"
(filename,
include.all = TRUE,
set.voice = NA,
local = FALSE,
layout.with = "fr",
plot.community = "spinglass",
context = 15,
multiplex = FALSE,
token.threshold = 1,
metadata.off = NA,
sample = FALSE,
vertex.label.thresh = 1,
bg.col = "white")
include.all = TRUE
set.voice = NA
local = FALSE
layout.with = "fr"
plot.community = "spinglass"
context = 15
multiplex = FALSE
token.threshold = 1
metadata.off = NA
sample = FALSE
vertex.label.thresh = 1
bg.col = "white"
### 1) Scan in .txt and .csv files, return as data frame ----
novel.dat <- Txt_to_df(filename = filename,
include.all = TRUE,
set.voice = NA, # set to override Char.csv settings
local = FALSE)
## create a lookforward KWIC matrix
novel.net <- charDf_to_edgelist(data = novel.dat,
context = 15,
multiplex = FALSE,
token.threshold = 1, # Austen, 10
metadata.off = NA, # for Austen settings: c("character, "N")
sample = FALSE)
## Extract a network object (net.igr)
net.igr <- nnLayout(novel.net = novel.net,
layout.with = "fr",
remove.isolates = TRUE,
min.degree = 1)
## Create Colors
E(net.igr)$edge.color <- createColorPalette(edgelist = net.igr,
vertex.color.index = "weight",
color.palette = c("gray80", "gray20"),
alpha.range = c(.2, .8),
vertex.edge = "edge")
V(net.igr)$vertex.color <- createColorPalette(edgelist = net.igr,
edge.color.index = "tokenCount",
color.palette = c("yellow", "tomato"),
alpha.range = c(.5, 1),
vertex.edge = "vertex")
# Cut off names of low-degree characters
V(net.igr)$vertex.label <- V(net.igr)$name
V(net.igr)$vertex.label[which(V(net.igr)$tokenCount <= vertex.label.thresh)] <- NA
## Plot
# Set plot parameters
# background color and margins
par(bg = bg.col, mar = c(1, 1, 1, 1))
### 1) Scan in .txt and .csv files, return as data frame ----
novel.dat <- Txt_to_df(filename = filename,
include.all = TRUE,
set.voice = NA, # set to override Char.csv settings
local = FALSE)
rm(list = ls())
nnNetwork <- function(filename,
include.all = TRUE,
set.voice = NA,
local = FALSE,
layout.with = "fr",
plot.community = "spinglass",
context = 15,
multiplex = FALSE,
token.threshold = 1,
metadata.off = NA,
sample = FALSE,
vertex.label.thresh = 1,
bg.col = "white"){
### 1) Scan in .txt and .csv files, return as data frame ----
novel.dat <- Txt_to_df(filename = filename,
include.all = TRUE,
set.voice = NA, # set to override Char.csv settings
local = FALSE)
### 2) Generate edgelist from char.data.df and text.uniq.v ----
###   a) Identify everywhere a character name appears within a certain range
###       of another character name, and record in an edgelist: from, to, position.
##        Position == word number of from character
## create a lookforward KWIC matrix
novel.net <- charDf_to_edgelist(data = novel.dat,
context = 15,
multiplex = FALSE,
token.threshold = 1, # Austen, 10
metadata.off = NA, # for Austen settings: c("character, "N")
sample = FALSE)
## Extract a network object (net.igr)
net.igr <- nnLayout(novel.net = novel.net,
layout.with = "fr",
remove.isolates = TRUE,
min.degree = 1)
## Create Colors
E(net.igr)$edge.color <- createColorPalette(edgelist = net.igr,
vertex.color.index = "weight",
color.palette = c("gray80", "gray20"),
alpha.range = c(.2, .8),
vertex.edge = "edge")
V(net.igr)$vertex.color <- createColorPalette(edgelist = net.igr,
edge.color.index = "tokenCount",
color.palette = c("yellow", "tomato"),
alpha.range = c(.5, 1),
vertex.edge = "vertex")
# Cut off names of low-degree characters
V(net.igr)$vertex.label <- V(net.igr)$name
V(net.igr)$vertex.label[which(V(net.igr)$tokenCount <= vertex.label.thresh)] <- NA
## Plot
# Set plot parameters
# background color and margins
par(bg = bg.col, mar = c(1, 1, 1, 1))
# plot title
if(plot.community != FALSE){title.start.v <- "The Communities of "} else {
title.start.v <- "Character Network of "}
main.title <- paste0(title.start.v, " ",
novel.dat$file.metadata.v["Title"],
" (",
novel.dat$file.metadata.v["Year"],
")")
# Plot without community:
if(plot.community == FALSE){
plot(net.igr,
edge.arrow.size = 0, edge.curved = 0,
edge.width = .5*E(net.igr)$weight^.4,
edge.color = E(net.igr)$edge.color,
layout = net.igr$layout,
vertex.size = degree(net.igr)^.4,
vertex.color = V(net.igr)$vertex.color,
vertex.label = V(net.igr)$vertex.label,
vertex.label.family = "Monaco", vertex.label.color = "black",
vertex.label.cex = .5,
label.degree = pi/2,
label.dist = 1,
main = main.title)
}
# Plot with community detection
# generate community object (net.com) from walktrap or spinglass algorithms
if(plot.community == "walktrap"){
# walktrap
net.com <- cluster_walktrap(net.igr)
}
if(plot.community == "spinglass"){
# spinglass (involves finding the largest connected component)
max.component.which.v <- which.max(clusters(net.igr)$csize)
max.component.v <- which(clusters(net.igr)$membership == max.component.which.v)
subgraph.igr <- induced.subgraph(net.igr, max.component.v)
net.com <- cluster_spinglass(subgraph.igr)
# map communities from subgraph to net.igr for color assignment
V(net.igr)$community.from.subgraph <-
membership(net.com)[V(net.igr)$name]
}
if(!is.na(plot.community)){
## assign color functions-- two options (one for gradient, the other for communities)
colors.fun <- colorRampPalette(brewer.pal(9, "Blues"))
default.colors <- categorical_pal(max(membership(net.com)))
plot(net.com,
net.igr,
mark.col = NA,
mark.border = "gray80",
col = default.colors[V(net.igr)$community.from.subgraph],
edge.arrow.size = 0, edge.curved = 0,
edge.width = E(net.igr)$weight^.4,
edge.color = E(net.igr)$edge.color,
layout = net.igr$layout,
vertex.size = 2.5*degree(net.igr)^.4,
vertex.label = V(net.igr)$vertex.label,
vertex.label.family = "Monaco",
vertex.label.color = "black",
vertex.label.cex = .8,
label.degree = pi/2,
label.dist = 1,
main = main.title)
}
}
